{"version":3,"sources":["constants/themes.ts","utils/get-random-theme-index.ts","utils/get-random-integer.ts","utils/get-random-theme.ts","map/map-old-theme-to-new-theme.ts","utils/left-pad.ts","components/audio/audio.view.tsx","components/audio/audio.hook.ts","components/clock/clock.hook.ts","hooks/use-viewport.ts","components/clock/clock.view.tsx","utils/toggle.ts","components/app/app.view.tsx","components/app/app.hook.ts","index.tsx","components/clock/clock.module.scss","components/app/app.module.scss"],"names":["getRandomThemeIndex","min","max","themes","length","Math","floor","random","getRandomTheme","themeIndex","mapOldThemeToNewTheme","oldTheme","newTheme","leftPad","n","toString","padStart","Audio","muted","onMount","handleEnded","ref","src","hours","Date","getHours","useRef","theme","setTheme","useState","useLayoutEffect","current","useCallback","useAudio","autoPlay","controls","loop","onEnded","useClock","date","minutes","getMinutes","seconds","getSeconds","forceUpdate","useForceUpdate","displayRef","viewportWidth","viewportHeight","useEffect","observer","ResizeObserver","observe","document","body","disconnect","useMemo","documentElement","clientWidth","window","innerWidth","clientHeight","innerHeight","useViewport","interval","setInterval","clearInterval","el","isSmallerThanViewport","rect","getBoundingClientRect","height","width","fontSize","style","setProperty","time","map","join","Clock","className","styles","root","toggle","bool","App","handleAudioMount","handleMainClick","audioRef","setMuted","audio","paused","play","useApp","main","onClick","ReactDOM","render","getElementById","module","exports"],"mappings":"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","file":"static/js/main.96da0045.chunk.js","sourcesContent":["export default [\n  'animal-crossing',\n  'animal-crossing/cherry-blossom-festival',\n  'animal-crossing/snow',\n  'animal-crossing-new-horizons',\n  'animal-crossing-new-horizons/rain',\n  'animal-crossing-new-horizons/snow',\n  'animal-crossing-new-leaf',\n  'animal-crossing-new-leaf/rain',\n  'animal-crossing-new-leaf/snow',\n  'animal-crossing-wild-world',\n  'animal-crossing-wild-world/rain',\n  'animal-crossing-wild-world/snow',\n];\n","import themes from '../constants/themes';\nimport getRandomInteger from '../utils/get-random-integer';\n\nexport default function getRandomThemeIndex(): number {\n  return getRandomInteger(0, themes.length - 1);\n}\n","export default function getRandomInteger(min: number, max: number): number {\n  return Math.floor(Math.random() * (max + 1)) + min;\n}\n","import themes from '../constants/themes';\nimport getRandomThemeIndex from '../utils/get-random-theme-index';\n\nexport default function getRandomTheme(): string {\n  const themeIndex: number = getRandomThemeIndex();\n  return themes[themeIndex];\n}\n","import getRandomTheme from '../utils/get-random-theme';\n\nexport default function mapOldThemeToNewTheme(oldTheme: string): string {\n  let newTheme: string;\n  do {\n    newTheme = getRandomTheme();\n  } while (newTheme === oldTheme);\n  return newTheme;\n}\n","export default function leftPad(n: number): string {\n  return n.toString().padStart(2, '0');\n}\n","import { ReactElement } from 'react';\nimport useAudio from './audio.hook';\n\ninterface Props {\n  muted: boolean;\n  onMount(audio: HTMLAudioElement): void;\n}\n\nexport default function Audio({ muted, onMount }: Props): ReactElement | null {\n  const { handleEnded, ref, src } = useAudio({ onMount });\n\n  return (\n    <audio\n      autoPlay\n      controls={false}\n      loop={false}\n      muted={muted}\n      onEnded={handleEnded}\n      ref={ref}\n      src={src}\n    />\n  );\n}\n","import {\n  MutableRefObject,\n  useCallback,\n  useLayoutEffect,\n  useRef,\n  useState,\n} from 'react';\n// import durations from '../../constants/durations';\nimport mapOldThemeToNewTheme from '../../map/map-old-theme-to-new-theme';\nimport getRandomTheme from '../../utils/get-random-theme';\nimport leftPad from '../../utils/left-pad';\n\ninterface Props {\n  onMount(audio: HTMLAudioElement): void;\n}\n\ninterface State {\n  handleEnded(): void;\n  ref: MutableRefObject<HTMLAudioElement | null>;\n  src: string;\n}\n\nexport default function useAudio({ onMount }: Props): State {\n  // Constants\n  const hours: number = new Date().getHours();\n\n  // States\n  const ref: MutableRefObject<HTMLAudioElement | null> = useRef(null);\n  const [theme, setTheme] = useState(getRandomTheme);\n\n  useLayoutEffect((): void => {\n    if (ref.current === null) {\n      return;\n    }\n    onMount(ref.current);\n  }, [onMount]);\n\n  return {\n    ref,\n    src: `./music/${theme}/${leftPad(hours)}.ogg`,\n\n    handleEnded: useCallback((): void => {\n      setTheme(mapOldThemeToNewTheme);\n    }, []),\n  };\n}\n","import { MutableRefObject, useEffect, useLayoutEffect, useRef } from 'react';\nimport useForceUpdate from 'use-force-update';\nimport useViewport from '../../hooks/use-viewport';\nimport leftPad from '../../utils/left-pad';\n\ninterface State {\n  displayRef: MutableRefObject<HTMLElement | null>;\n  time: string;\n}\n\nconst MILLISECONDS_PER_SECOND = 1000;\n\nexport default function useClock(): State {\n  // Constants\n  const date: Date = new Date();\n  const hours: number = date.getHours();\n  const minutes: number = date.getMinutes();\n  const seconds: number = date.getSeconds();\n\n  // States\n  const forceUpdate: VoidFunction = useForceUpdate();\n  const displayRef: MutableRefObject<HTMLElement | null> = useRef(null);\n  const [viewportWidth, viewportHeight] = useViewport();\n\n  useEffect((): VoidFunction => {\n    const interval: number = window.setInterval(\n      forceUpdate,\n      MILLISECONDS_PER_SECOND,\n    );\n    return (): void => {\n      window.clearInterval(interval);\n    };\n  }, [forceUpdate]);\n\n  useLayoutEffect((): void => {\n    const el: HTMLElement | null = displayRef.current;\n    if (el === null) {\n      return;\n    }\n\n    const isSmallerThanViewport = (): boolean => {\n      const rect: DOMRect = el.getBoundingClientRect();\n      return (\n        rect.height < viewportHeight * 0.85 && rect.width < viewportWidth * 0.85\n      );\n    };\n\n    let fontSize = 0;\n    while (isSmallerThanViewport()) {\n      fontSize++;\n      el.style.setProperty('font-size', `${fontSize}px`);\n    }\n    el.style.setProperty('font-size', `${fontSize - 1}px`);\n  }, [viewportHeight, viewportWidth]);\n\n  return {\n    displayRef,\n    time: `${[hours, minutes, seconds].map(leftPad).join(':')}`,\n  };\n}\n","/// <reference types=\"resize-observer-browser\" />\nimport { useEffect, useMemo } from 'react';\nimport useForceUpdate from 'use-force-update';\n\nexport default function useViewport(): [number, number] {\n  const forceUpdate: VoidFunction = useForceUpdate();\n\n  // TODO: Trigger when viewport expands or shrinks. Currently, does not\n  //   trigger. We especially want to know if the window got smaller even though\n  //   the contents may be stretching the document body's width.\n  useEffect((): VoidFunction => {\n    const observer: ResizeObserver = new ResizeObserver(forceUpdate);\n    observer.observe(document.body);\n    return (): void => {\n      observer.disconnect();\n    };\n  }, [forceUpdate]);\n\n  return [\n    useMemo((): number => {\n      return Math.max(\n        document.documentElement.clientWidth || 0,\n        window.innerWidth || 0,\n      );\n    }, []),\n\n    useMemo((): number => {\n      return Math.max(\n        document.documentElement.clientHeight || 0,\n        window.innerHeight || 0,\n      );\n    }, []),\n  ];\n}\n","import { ReactElement } from 'react';\nimport useClock from './clock.hook';\nimport styles from './clock.module.scss';\n\nexport default function Clock(): ReactElement {\n  const { displayRef, time } = useClock();\n\n  return (\n    <div className={styles.root}>\n      <span ref={displayRef}>\n        <span className={styles.time}>{time}</span>\n      </span>\n    </div>\n  );\n}\n","export default function toggle(bool: boolean): boolean {\n  return !bool;\n}\n","import { ReactElement } from 'react';\nimport Audio from '../../components/audio';\nimport Clock from '../../components/clock';\nimport useApp from './app.hook';\nimport styles from './app.module.scss';\n\nexport default function App(): ReactElement {\n  const { handleAudioMount, handleMainClick, muted } = useApp();\n\n  return (\n    <>\n      <Audio muted={muted} onMount={handleAudioMount} />\n      <main className={styles.main} onClick={handleMainClick}>\n        <Clock />\n      </main>\n    </>\n  );\n}\n","import { MutableRefObject, useCallback, useRef, useState } from 'react';\nimport toggle from '../../utils/toggle';\n\ninterface State {\n  handleAudioMount(audio: HTMLAudioElement): void;\n  handleMainClick(): void;\n  muted: boolean;\n}\n\nexport default function useApp(): State {\n  const audioRef: MutableRefObject<HTMLAudioElement | null> = useRef(null);\n  const [muted, setMuted] = useState(false);\n\n  return {\n    muted,\n\n    handleAudioMount: useCallback((audio: HTMLAudioElement): void => {\n      audioRef.current = audio;\n    }, []),\n\n    handleMainClick: useCallback((): void => {\n      if (audioRef.current === null) {\n        return;\n      }\n      if (audioRef.current.paused) {\n        audioRef.current.play();\n      } else {\n        setMuted(toggle);\n      }\n    }, []),\n  };\n}\n","import { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app';\nimport './index.css';\n\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"clock_root__23mSH\",\"time\":\"clock_time__3DBlu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"app_main__zAhuu\"};"],"sourceRoot":""}